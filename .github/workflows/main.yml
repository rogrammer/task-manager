name: CI/CD Pipeline

on:
  push:
    branches:
      - master # Change to 'main' if your branch is named 'main'

env:
  AWS_REGION: eu-north-1 # Replace with your AWS region
  ECR_REPOSITORY_FRONTEND: frontend
  ECR_REPOSITORY_BACKEND: backend
  ECS_CLUSTER: task-cluster
  ECS_SERVICE_FRONTEND: frontend-service
  ECS_SERVICE_BACKEND: backend-service
  ECS_TASK_DEFINITION_FRONTEND: ecs-task-definition-frontend.json
  ECS_TASK_DEFINITION_BACKEND: ecs-task-definition-backend.json
  CONTAINER_NAME_FRONTEND: frontend-container
  CONTAINER_NAME_BACKEND: backend-container

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC authentication
      contents: read # Required for checkout

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js (optional, keep if you need to install dependencies or run tests)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Cache Node.js modules for backend (optional)
      - name: Cache backend node modules
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      # Install backend dependencies (optional, remove if not needed)
      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      # Run backend tests (optional, remove if not needed)
      - name: Run backend tests
        run: |
          cd backend
          npm test

      # Cache Node.js modules for frontend (optional)
      - name: Cache frontend node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      # Install frontend dependencies (optional)
      - name: Install frontend dependencies
        run: |
          cd frontend  
          npm install

      # Build frontend (optional, ensures build works before Docker)
      - name: Build frontend
        run: |
          cd frontend 
          npm run build

      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsRole # Replace with your IAM role ARN
          aws-region: ${{ env.AWS_REGION }}

      # Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build, tag, and push frontend image to ECR
      - name: Build, tag, and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd frontend 
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:latest

      # Build, tag, and push backend image to ECR
      - name: Build, tag, and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend 
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:latest

      # Render frontend task definition
      - name: Render frontend task definition
        id: render-frontend-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_FRONTEND }}
          container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}

      # Render backend task definition
      - name: Render backend task definition
        id: render-backend-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_BACKEND }}
          container-name: ${{ env.CONTAINER_NAME_BACKEND }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}

      # Deploy frontend task definition to ECS
      - name: Deploy frontend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-frontend-task.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # Deploy backend task definition to ECS
      - name: Deploy backend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-backend-task.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
